from flask import Flask, request, render_template, jsonify
import spacy
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

app = Flask(__name__)

# Load SpaCy model
nlp = spacy.load("en_core_web_sm")

# Sample FAQ data
faq_data = [
    {"question": "How do I connect the earbuds to my phone?", 
     "answer": "Turn on Bluetooth on your phone and select the earbuds from the list."},
    
    {"question": "What is the battery life of the earbuds?", 
     "answer": "Up to 6 hours on a single charge."},

    {"question": "Can I use only one earbud?", 
     "answer": "Yes, you can use either earbud individually."},

    {"question": "Are they waterproof?", 
     "answer": "They are IPX5 water resistant."},

    {"question": "How do I reset the earbuds?", 
     "answer": "Press and hold both for 10 seconds to reset."}
]

# Preprocess text
def preprocess(text):
    doc = nlp(text.lower())
    return " ".join([token.lemma_ for token in doc if token.is_alpha and not token.is_stop])

# Prepare TF-IDF matrix
questions = [preprocess(faq["question"]) for faq in faq_data]
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(questions)

# Find best match
def find_best_match(user_input):
    query = preprocess(user_input)
    vec = vectorizer.transform([query])
    sim = cosine_similarity(vec, tfidf_matrix)
    best_idx = np.argmax(sim)
    return faq_data[best_idx]["answer"]

# Flask routes
@app.route('/')
def home():
    return render_template("index.html")

@app.route('/ask', methods=['POST'])
def ask():
    user_input = request.json.get("question")
    answer = find_best_match(user_input)
    return jsonify({"answer": answer})

if __name__ == "__main__":
    app.run(debug=True)
